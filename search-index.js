var searchIndex = {};
searchIndex["linear_map"] = {"doc":"A map implemented by searching linearly in a vector.","items":[[3,"LinearMap","linear_map","A map implemented by searching linearly in a vector.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a `LinearMap`.",null,null],[3,"VacantEntry","","A view into a single vacant location in a `LinearMap`.",null,null],[3,"IntoIter","","A consuming iterator over a `LinearMap`.",null,null],[3,"Drain","","A draining iterator over a `LinearMap`.",null,null],[3,"Iter","","An iterator yielding references to a `LinearMap`'s keys and their corresponding values.",null,null],[3,"IterMut","","An iterator yielding references to a `LinearMap`'s keys and mutable references to their corresponding values.",null,null],[3,"Keys","","An iterator yielding references to a `LinearMap`'s keys in arbitrary order.",null,null],[3,"Values","","An iterator yielding references to a `LinearMap`'s values in arbitrary order.",null,null],[4,"Entry","","A view into a single entry in a `LinearMap`.",null,null],[13,"Occupied","","An occupied entry.",0,null],[13,"Vacant","","A vacant entry.",0,null],[0,"set","","A set implemented by searching linearly in a vector.",null,null],[3,"LinearSet","linear_map::set","An implementation of a set using the underlying representation of a LinearMap where the value is ().",null,null],[3,"Iter","","LinearSet iterator",null,null],[3,"IntoIter","","LinearSet move iterator",null,null],[3,"Drain","","LinearSet drain iterator",null,null],[3,"Intersection","","Intersection iterator",null,null],[3,"Difference","","Difference iterator",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"Union","","Set union iterator.",null,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"linearset"}}],[11,"new","","Creates an empty LinearSet.",1,{"inputs":[],"output":{"name":"linearset"}}],[11,"with_capacity","","Creates an empty LinearSet with space for at least `n` elements in the map.",1,{"inputs":[{"name":"usize"}],"output":{"name":"linearset"}}],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the `LinearSet`. The collection may reserve more space to avoid frequent reallocations.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop down as much as possible while maintaining the internal rules and possibly leaving some space in accordance with the resize policy.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"iter","","An iterator visiting all elements in arbitrary order. Iterator element type is &'a T.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"difference","","Visit the values representing the difference.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visit the values representing the intersection.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"intersection"}}],[11,"union","","Visit the values representing the union.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"drain","","Clears the set, returning all elements in an iterator.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the set, removing all values.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"contains","","Returns `true` if the set contains a value.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`. This is equivalent to checking for an empty intersection.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was present in the set.",1,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"linearset"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"linearset"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"default","","",1,{"inputs":[],"output":{"name":"linearset"}}],[11,"into","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of the set in arbitrary order. The set cannot be used after calling this.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"len","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"intersection"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"difference"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"symmetricdifference"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"union"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"new","linear_map","Creates an empty map. This method does not allocate.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty map with the given initial capacity.",9,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more to be inserted in the map. The collection may reserve more space to avoid frequent reallocations.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elemnnts to be inserted in the map.",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Returns the number of elements in the map.",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all elements. Keeps the allocated memory for reuse.",9,{"inputs":[{"name":"self"}],"output":null}],[11,"drain","","Removes all key-value pairs from the map and returns an iterator that yields them in arbitrary order.",9,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"iter","","Returns an iterator yielding references to the map's keys and their corresponding values in arbitrary order.",9,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator yielding references to the map's keys and mutable references to their corresponding values in arbitrary order.",9,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","Returns an iterator yielding references to the map's keys in arbitrary order.",9,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator yielding references to the map's values in arbitrary order.",9,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"get","","Returns a reference to the value in the map whose key is equal to the given key.",9,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value in the map whose key is equal to the given key.",9,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Checks if the map contains a key that is equal to the given key.",9,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"bool"}}],[11,"insert","","Inserts a key-value pair into the map.",9,{"inputs":[{"name":"self"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes the key in the map that is equal to the given key and returns its corresponding value.",9,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"option"}}],[11,"entry","","Returns the given key's corresponding entry in the map for in-place manipulation.",9,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"entry"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"extend","","",9,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"from_iter","","",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"q"}],"output":{"name":"v"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"into","","",9,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"or_insert","","Ensures that the entry is occupied by inserting the given value if it is vacant.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures that the entry is occupied by inserting the the result of the given function if it is vacant.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"get","","Returns a reference to the entry's value.",10,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Returns a mutable reference to the entry's value.",10,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Returns a mutable reference to the entry's value with the same lifetime as the map.",10,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Replaces the entry's value with the given one and returns the previous value.",10,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Removes the entry from the map and returns its value.",10,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Inserts the entry into the map with the given value.",11,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",12,null],[11,"next_back","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",13,null],[11,"next_back","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",14,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",16,null],[11,"next_back","","",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",16,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"next","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",17,null],[11,"next_back","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"len","","",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"into_iter","","",9,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[14,"linear_map","","Creates a `LinearMap` from a list of key-value pairs.",null,null]],"paths":[[4,"Entry"],[3,"LinearSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"LinearMap"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"]]};
initSearch(searchIndex);
